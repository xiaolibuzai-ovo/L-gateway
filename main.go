// Code generated by hertz generator.

package main

import (
	"context"
	"flag"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/network/standard"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/xiaolibuzai-ovo/L-gateway/GateWay"
	dashboard "github.com/xiaolibuzai-ovo/L-gateway/biz"
	"github.com/xiaolibuzai-ovo/L-gateway/biz/dal"
	"os"
)

// config
const (
	port = "127.0.0.1:8080"
	size = 20 << 20
)

//endpoint dashboard 后台管理 server gateway

var (
	endpoint = flag.String("endpoint", "", "input endpoint dashboard or server")
)

func main() {
	flag.Parse()
	if *endpoint == "" {
		flag.Usage()
		os.Exit(1)
	}
	if *endpoint == "dashboard" {
		//初始化数据库
		dal.Init()

		h := server.Default(
			server.WithHostPorts(port),
			server.WithMaxRequestBodySize(size),
			server.WithTransport(standard.NewTransporter),
		)
		dashboard.RegisterDashBoard(h)

		h.Spin()
	} else if *endpoint == "server" {
		h := server.Default(
			server.WithHostPorts(port),
			server.WithMaxRequestBodySize(size),
			server.WithTransport(standard.NewTransporter),
		)

		h.Use(recovery.Recovery(recovery.WithRecoveryHandler(MyRecoveryHandler)))

		GateWay.RegisterGateWay(h)

		go func() {
			//启动https端口监听
		}()
		go func() {
			//启动http端口监听

		}()

	}

}
func MyRecoveryHandler(c context.Context, ctx *app.RequestContext, err interface{}, stack []byte) {
	hlog.SystemLogger().CtxErrorf(c, "[Recovery] err=%v\nstack=%s", err, stack)
	hlog.SystemLogger().Infof("Client: %s", ctx.Request.Header.UserAgent())
	ctx.AbortWithStatus(consts.StatusInternalServerError)
}
